plugins {
    id "org.jetbrains.kotlin.jvm" version "1.4.10"
    id "org.jetbrains.kotlin.kapt" version "1.4.10"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.4.10"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "io.micronaut.application" version "1.0.3"
    //plugin for publishing files
    id "au.com.dius.pact" version "4.1.7"
}

//plugin for publishing files
apply plugin: 'au.com.dius.pact'

version "0.1"
group "ro.mihai97ionita"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime "netty"
    testRuntime "junit5"
    processing {
        incremental true
        annotations "ro.mihai97ionita.*"
    }
}

dependencies {
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")


    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation("org.assertj:assertj-core:3.17.2")

    //testImplementation("au.com.dius:pact-jvm-consumer-junit_2.11:3.5.0")
    //testImplementation("au.com.dius:pact-jvm-consumer-junit5:4.0.10")

    //consumer dependencies for wiremock contract testing + own scripts
    implementation("com.atlassian.ta:wiremock-pact-generator:2.3.0")
    implementation("com.github.tomakehurst:wiremock:2.27.2")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")

    //consumer dependencies for pact dsl contract testing
    implementation("au.com.dius.pact.consumer:java8:4.1.0")
}

mainClassName = "ro.mihai97ionita.ApplicationKt"
java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
    }
}
//this is for the provider side,
test {
    useJUnitPlatform()
    systemProperties['pact.rootDir'] = "$buildDir\\pacts"
}

//this publishing pact files
pact {

    publish {
        pactDirectory = "$buildDir/pacts"
        pactBrokerUrl = "http://localhost:9292"
        pactBrokerUsername = System.getenv().getOrDefault("PACT_BROKER_USERNAME", "unknownUser")
        pactBrokerPassword = System.getenv().getOrDefault("PACT_BROKER_PASSWORD", "unknownPassword")
        version = System.getenv().getOrDefault("CI_COMMIT_SHORT_SHA", "unknown")
    }

    serviceProviders {

        // You can define as many as you need, but each must have a unique name
        'the-provide' {
            // Again, you can define as many consumers for each provider as you need, but each must have a unique name
            hasPactWith('the-consumer') {
                // currently supports a file path using file() or a URL using url()
                pactSource = file("$rootDir/build/pacts/")
            }

//            // Or if you have many pact files in a directory
//            hasPactsWith('manyConsumers') {
//                // Will define a consumer for each pact file in the directory.
//                // Consumer name is read from contents of pact file
//                pactFileLocation = file('path/to/pacts')
//            }
        }

    }
}


